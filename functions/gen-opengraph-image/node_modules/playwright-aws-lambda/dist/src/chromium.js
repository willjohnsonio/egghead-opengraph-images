"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const path_1 = require("path");
const playwright = require("playwright-core");
const isLambdaRuntimeEnvironment_1 = require("./util/isLambdaRuntimeEnvironment");
const isHeadlessModeEnabled_1 = require("./util/isHeadlessModeEnabled");
const fileExists_1 = require("./util/fileExists");
const setEnvironmentVariables_1 = require("./util/setEnvironmentVariables");
const getMemorySize_1 = require("./util/getMemorySize");
const { inflate } = require('lambdafs');
setEnvironmentVariables_1.default();
/**
 * Returns a list of recommended additional Chromium flags.
 */
function getChromiumArgs(headless) {
    const result = [
        '--disable-background-timer-throttling',
        '--disable-breakpad',
        '--disable-client-side-phishing-detection',
        '--disable-cloud-import',
        '--disable-default-apps',
        '--disable-dev-shm-usage',
        '--disable-extensions',
        '--disable-gesture-typing',
        '--disable-hang-monitor',
        '--disable-infobars',
        '--disable-notifications',
        '--disable-offer-store-unmasked-wallet-cards',
        '--disable-offer-upload-credit-cards',
        '--disable-popup-blocking',
        '--disable-print-preview',
        '--disable-prompt-on-repost',
        '--disable-setuid-sandbox',
        '--disable-speech-api',
        '--disable-sync',
        '--disable-tab-for-desktop-share',
        '--disable-translate',
        '--disable-voice-input',
        '--disable-wake-on-wifi',
        '--disk-cache-size=33554432',
        '--enable-async-dns',
        '--enable-simple-cache-backend',
        '--enable-tcp-fast-open',
        '--enable-webgl',
        '--hide-scrollbars',
        '--ignore-gpu-blacklist',
        '--media-cache-size=33554432',
        '--metrics-recording-only',
        '--mute-audio',
        '--no-default-browser-check',
        '--no-first-run',
        '--no-pings',
        '--no-sandbox',
        '--no-zygote',
        '--password-store=basic',
        '--prerender-from-omnibox=disabled',
        '--use-gl=swiftshader',
        '--use-mock-keychain',
    ];
    if (getMemorySize_1.default() >= 1024) {
        result.push('--memory-pressure-off');
    }
    if (headless === true) {
        result.push('--single-process');
    }
    else {
        result.push('--start-maximized');
    }
    return result;
}
exports.getChromiumArgs = getChromiumArgs;
async function getChromiumExecutablePath(headless) {
    if (headless !== true) {
        return undefined;
    }
    if ((await fileExists_1.default('/tmp/chromium')) === true) {
        for (const file of await fs_1.promises.readdir('/tmp')) {
            if (file.startsWith('core.chromium') === true) {
                await fs_1.promises.unlink(`/tmp/${file}`);
            }
        }
        return '/tmp/chromium';
    }
    const input = path_1.join(__dirname, 'bin');
    const promises = [
        inflate(`${input}/chromium.br`),
        inflate(`${input}/swiftshader.tar.br`),
    ];
    if (isLambdaRuntimeEnvironment_1.default()) {
        promises.push(inflate(`${input}/aws.tar.br`));
    }
    const result = await Promise.all(promises);
    return result.shift();
}
async function launchChromium(launchOptions) {
    const headless = isHeadlessModeEnabled_1.default();
    const args = getChromiumArgs(headless);
    const executablePath = await getChromiumExecutablePath(headless);
    const browser = await playwright.chromium.launch({
        args,
        executablePath,
        headless,
        ...launchOptions,
    });
    return browser;
}
exports.launchChromium = launchChromium;
