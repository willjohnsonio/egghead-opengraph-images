"use strict";
/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const network = require("./network");
const helper_1 = require("./helper");
const platform = require("./platform");
const events_1 = require("./events");
const timeoutSettings_1 = require("./timeoutSettings");
class BrowserContext extends platform.EventEmitter {
    constructor(delegate, options) {
        super();
        this._closed = false;
        this._delegate = delegate;
        this._timeoutSettings = new timeoutSettings_1.TimeoutSettings();
        this._options = { ...options };
        if (!this._options.viewport && this._options.viewport !== null)
            this._options.viewport = { width: 800, height: 600 };
        if (this._options.viewport)
            this._options.viewport = { ...this._options.viewport };
        if (this._options.geolocation)
            this._options.geolocation = verifyGeolocation(this._options.geolocation);
    }
    async _initialize() {
        const entries = Object.entries(this._options.permissions || {});
        await Promise.all(entries.map(entry => this.setPermissions(entry[0], entry[1])));
        if (this._options.geolocation)
            await this.setGeolocation(this._options.geolocation);
    }
    _existingPages() {
        return this._delegate.existingPages();
    }
    setDefaultNavigationTimeout(timeout) {
        this._timeoutSettings.setDefaultNavigationTimeout(timeout);
    }
    setDefaultTimeout(timeout) {
        this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async pages() {
        return this._delegate.pages();
    }
    async newPage() {
        const pages = this._delegate.existingPages();
        for (const page of pages) {
            if (page._ownedContext)
                throw new Error('Please use browser.newContext() for multi-page scripts that share the context.');
        }
        return this._delegate.newPage();
    }
    async cookies(...urls) {
        return network.filterCookies(await this._delegate.cookies(), urls);
    }
    async setCookies(cookies) {
        await this._delegate.setCookies(network.rewriteCookies(cookies));
    }
    async clearCookies() {
        await this._delegate.clearCookies();
    }
    async setPermissions(origin, permissions) {
        await this._delegate.setPermissions(origin, permissions);
    }
    async clearPermissions() {
        await this._delegate.clearPermissions();
    }
    async setGeolocation(geolocation) {
        if (geolocation)
            geolocation = verifyGeolocation(geolocation);
        this._options.geolocation = geolocation || undefined;
        await this._delegate.setGeolocation(geolocation);
    }
    async close() {
        if (this._closed)
            return;
        await this._delegate.close();
        this._closed = true;
        this.emit(events_1.Events.BrowserContext.Close);
    }
    static validateOptions(options) {
        if (options.geolocation)
            verifyGeolocation(options.geolocation);
    }
    _browserClosed() {
        this._closed = true;
        for (const page of this._delegate.existingPages())
            page._didClose();
        this.emit(events_1.Events.BrowserContext.Close);
    }
}
exports.BrowserContext = BrowserContext;
function verifyGeolocation(geolocation) {
    const result = { ...geolocation };
    result.accuracy = result.accuracy || 0;
    const { longitude, latitude, accuracy } = result;
    if (!helper_1.helper.isNumber(longitude) || longitude < -180 || longitude > 180)
        throw new Error(`Invalid longitude "${longitude}": precondition -180 <= LONGITUDE <= 180 failed.`);
    if (!helper_1.helper.isNumber(latitude) || latitude < -90 || latitude > 90)
        throw new Error(`Invalid latitude "${latitude}": precondition -90 <= LATITUDE <= 90 failed.`);
    if (!helper_1.helper.isNumber(accuracy) || accuracy < 0)
        throw new Error(`Invalid accuracy "${accuracy}": precondition 0 <= ACCURACY failed.`);
    return result;
}
//# sourceMappingURL=browserContext.js.map