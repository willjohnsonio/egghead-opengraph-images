/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as types from './types';
import * as dom from './dom';
export interface ExecutionContextDelegate {
    evaluate(context: ExecutionContext, returnByValue: boolean, pageFunction: string | Function, ...args: any[]): Promise<any>;
    getProperties(handle: JSHandle): Promise<Map<string, JSHandle>>;
    releaseHandle(handle: JSHandle): Promise<void>;
    handleToString(handle: JSHandle, includeType: boolean): string;
    handleJSONValue<T>(handle: JSHandle<T>): Promise<T>;
}
export declare class ExecutionContext {
    readonly _delegate: ExecutionContextDelegate;
    constructor(delegate: ExecutionContextDelegate);
    _evaluate(returnByValue: boolean, pageFunction: string | Function, ...args: any[]): Promise<any>;
    evaluate: types.Evaluate;
    evaluateHandle: types.EvaluateHandle;
    _createHandle(remoteObject: any): JSHandle;
}
export declare class JSHandle<T = any> {
    readonly _context: ExecutionContext;
    readonly _remoteObject: any;
    _disposed: boolean;
    constructor(context: ExecutionContext, remoteObject: any);
    evaluate: types.EvaluateOn<T>;
    evaluateHandle: types.EvaluateHandleOn<T>;
    getProperty(propertyName: string): Promise<JSHandle | null>;
    getProperties(): Promise<Map<string, JSHandle>>;
    jsonValue(): Promise<T>;
    asElement(): dom.ElementHandle | null;
    dispose(): Promise<void>;
    toString(): string;
}
