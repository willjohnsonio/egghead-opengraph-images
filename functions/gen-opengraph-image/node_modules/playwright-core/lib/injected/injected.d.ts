/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { SelectorEngine } from './selectorEngine';
import { Utils } from './utils';
declare type Predicate = (element: Element | undefined) => any;
declare class Injected {
    readonly utils: Utils;
    readonly engines: Map<string, SelectorEngine>;
    constructor(customEngines: SelectorEngine[]);
    querySelector(selector: string, root: Node): Element | undefined;
    querySelectorAll(selector: string, root: Node): Element[];
    private _parseSelector;
    isVisible(element: Element): boolean;
    pollMutation(selector: string | undefined, predicate: Predicate, timeout: number): Promise<any>;
    pollRaf(selector: string | undefined, predicate: Predicate, timeout: number): Promise<any>;
    pollInterval(selector: string | undefined, pollInterval: number, predicate: Predicate, timeout: number): Promise<any>;
}
export default Injected;
