"use strict";
/**
 * Copyright 2018 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
class SlowMoTransport {
    constructor(transport, delay) {
        this._incomingMessageQueue = [];
        this._delay = delay;
        this._delegate = transport;
        this._delegate.onmessage = this._enqueueMessage.bind(this);
        this._delegate.onclose = this._onClose.bind(this);
    }
    static wrap(transport, delay) {
        return delay ? new SlowMoTransport(transport, delay) : transport;
    }
    _enqueueMessage(message) {
        this._incomingMessageQueue.push(message);
        this._scheduleQueueDispatch();
    }
    _scheduleQueueDispatch() {
        if (this._dispatchTimerId)
            return;
        if (!this._incomingMessageQueue.length)
            return;
        this._dispatchTimerId = setTimeout(() => {
            this._dispatchTimerId = undefined;
            this._dispatchOneMessageFromQueue();
        }, this._delay);
    }
    _dispatchOneMessageFromQueue() {
        const message = this._incomingMessageQueue.shift();
        try {
            if (this.onmessage)
                this.onmessage(message);
        }
        finally {
            this._scheduleQueueDispatch();
        }
    }
    _onClose() {
        if (this.onclose)
            this.onclose();
        this._delegate.onmessage = undefined;
        this._delegate.onclose = undefined;
    }
    send(s) {
        this._delegate.send(s);
    }
    close() {
        this._delegate.close();
    }
}
exports.SlowMoTransport = SlowMoTransport;
class DeferWriteTransport {
    constructor(transport) {
        this._delegate = transport;
        let callback;
        this._readPromise = new Promise(f => callback = f);
        this._delegate.onmessage = s => {
            callback();
            if (this.onmessage)
                this.onmessage(s);
        };
        this._delegate.onclose = () => {
            if (this.onclose)
                this.onclose();
        };
    }
    async send(s) {
        await this._readPromise;
        this._delegate.send(s);
    }
    close() {
        this._delegate.close();
    }
}
exports.DeferWriteTransport = DeferWriteTransport;
//# sourceMappingURL=transport.js.map