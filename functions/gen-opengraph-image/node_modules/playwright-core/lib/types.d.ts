/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as js from './javascript';
import * as dom from './dom';
declare type Boxed<Args extends any[]> = {
    [Index in keyof Args]: Args[Index] | js.JSHandle<Args[Index]>;
};
declare type PageFunction<Args extends any[], R = any> = string | ((...args: Args) => R | Promise<R>);
declare type PageFunctionOn<On, Args extends any[], R = any> = string | ((on: On, ...args: Args) => R | Promise<R>);
declare type Handle<T> = T extends Node ? dom.ElementHandle<T> : js.JSHandle<T>;
export declare type Evaluate = <Args extends any[], R>(pageFunction: PageFunction<Args, R>, ...args: Boxed<Args>) => Promise<R>;
export declare type EvaluateHandle = <Args extends any[], R>(pageFunction: PageFunction<Args, R>, ...args: Boxed<Args>) => Promise<Handle<R>>;
export declare type $Eval = <Args extends any[], R>(selector: string, pageFunction: PageFunctionOn<Element, Args, R>, ...args: Boxed<Args>) => Promise<R>;
export declare type $$Eval = <Args extends any[], R>(selector: string, pageFunction: PageFunctionOn<Element[], Args, R>, ...args: Boxed<Args>) => Promise<R>;
export declare type EvaluateOn<T> = <Args extends any[], R>(pageFunction: PageFunctionOn<T, Args, R>, ...args: Boxed<Args>) => Promise<R>;
export declare type EvaluateHandleOn<T> = <Args extends any[], R>(pageFunction: PageFunctionOn<T, Args, R>, ...args: Boxed<Args>) => Promise<Handle<R>>;
export declare type Size = {
    width: number;
    height: number;
};
export declare type Point = {
    x: number;
    y: number;
};
export declare type Rect = Size & Point;
export declare type Quad = [Point, Point, Point, Point];
export declare type TimeoutOptions = {
    timeout?: number;
};
export declare type Visibility = 'visible' | 'hidden' | 'any';
export declare type Polling = 'raf' | 'mutation' | number;
export declare type WaitForFunctionOptions = TimeoutOptions & {
    polling?: Polling;
};
export declare type ElementScreenshotOptions = {
    type?: 'png' | 'jpeg';
    path?: string;
    quality?: number;
    omitBackground?: boolean;
};
export declare type ScreenshotOptions = ElementScreenshotOptions & {
    fullPage?: boolean;
    clip?: Rect;
};
export declare type Viewport = {
    width: number;
    height: number;
    deviceScaleFactor?: number;
    isMobile?: boolean;
};
export declare type URLMatch = string | RegExp | ((url: URL) => boolean);
export declare type Credentials = {
    username: string;
    password: string;
};
export declare type Geolocation = {
    longitude: number;
    latitude: number;
    accuracy?: number;
};
export declare type SelectOption = {
    value?: string;
    label?: string;
    index?: number;
};
export declare type FilePayload = {
    name: string;
    type: string;
    data: string;
};
export declare type MediaType = 'screen' | 'print';
export declare const mediaTypes: Set<MediaType>;
export declare type ColorScheme = 'dark' | 'light' | 'no-preference';
export declare const colorSchemes: Set<ColorScheme>;
export declare type DeviceDescriptor = {
    name: string;
    userAgent: string;
    viewport: Viewport;
};
export declare type Devices = {
    [name: string]: DeviceDescriptor;
} & DeviceDescriptor[];
export declare type PDFOptions = {
    scale?: number;
    displayHeaderFooter?: boolean;
    headerTemplate?: string;
    footerTemplate?: string;
    printBackground?: boolean;
    landscape?: boolean;
    pageRanges?: string;
    format?: string;
    width?: string | number;
    height?: string | number;
    preferCSSPageSize?: boolean;
    margin?: {
        top?: string | number;
        bottom?: string | number;
        left?: string | number;
        right?: string | number;
    };
    path?: string;
};
export declare type CoverageEntry = {
    url: string;
    text: string;
    ranges: {
        start: number;
        end: number;
    }[];
};
export declare type CSSCoverageOptions = {
    resetOnNavigation?: boolean;
};
export declare type JSCoverageOptions = {
    resetOnNavigation?: boolean;
    reportAnonymousScripts?: boolean;
};
export {};
