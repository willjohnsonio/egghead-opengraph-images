/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="debug" />
import * as platform from './platform';
export declare const debugError: import("debug").IDebugger;
export declare type RegisteredListener = {
    emitter: platform.EventEmitterType;
    eventName: (string | symbol);
    handler: (...args: any[]) => void;
};
declare class Helper {
    static evaluationString(fun: Function | string, ...args: any[]): string;
    static installApiHooks(className: string, classType: any): void;
    static addEventListener(emitter: platform.EventEmitterType, eventName: (string | symbol), handler: (...args: any[]) => void): RegisteredListener;
    static removeEventListeners(listeners: Array<{
        emitter: platform.EventEmitterType;
        eventName: (string | symbol);
        handler: (...args: any[]) => void;
    }>): void;
    static isString(obj: any): obj is string;
    static isNumber(obj: any): obj is number;
    static waitForEvent(emitter: platform.EventEmitterType, eventName: (string | symbol), predicate: Function, timeout: number, abortPromise: Promise<Error>): Promise<any>;
    static waitWithTimeout<T>(promise: Promise<T>, taskName: string, timeout: number): Promise<T>;
    static globToRegex(glob: string): RegExp;
    static completeUserURL(urlString: string): string;
}
export declare function assert(value: any, message?: string): asserts value;
export declare const helper: typeof Helper;
export {};
