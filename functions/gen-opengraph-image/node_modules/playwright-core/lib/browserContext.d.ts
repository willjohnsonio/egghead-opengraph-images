/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Page } from './page';
import * as network from './network';
import * as types from './types';
import * as platform from './platform';
import { TimeoutSettings } from './timeoutSettings';
export interface BrowserContextDelegate {
    pages(): Promise<Page[]>;
    existingPages(): Page[];
    newPage(): Promise<Page>;
    close(): Promise<void>;
    cookies(): Promise<network.NetworkCookie[]>;
    setCookies(cookies: network.SetNetworkCookieParam[]): Promise<void>;
    clearCookies(): Promise<void>;
    setPermissions(origin: string, permissions: string[]): Promise<void>;
    clearPermissions(): Promise<void>;
    setGeolocation(geolocation: types.Geolocation | null): Promise<void>;
}
export declare type BrowserContextOptions = {
    viewport?: types.Viewport | null;
    ignoreHTTPSErrors?: boolean;
    javaScriptEnabled?: boolean;
    bypassCSP?: boolean;
    userAgent?: string;
    locale?: string;
    timezoneId?: string;
    geolocation?: types.Geolocation;
    permissions?: {
        [key: string]: string[];
    };
};
export declare class BrowserContext extends platform.EventEmitter {
    private readonly _delegate;
    readonly _options: BrowserContextOptions;
    readonly _timeoutSettings: TimeoutSettings;
    private _closed;
    constructor(delegate: BrowserContextDelegate, options: BrowserContextOptions);
    _initialize(): Promise<void>;
    _existingPages(): Page[];
    setDefaultNavigationTimeout(timeout: number): void;
    setDefaultTimeout(timeout: number): void;
    pages(): Promise<Page[]>;
    newPage(): Promise<Page>;
    cookies(...urls: string[]): Promise<network.NetworkCookie[]>;
    setCookies(cookies: network.SetNetworkCookieParam[]): Promise<void>;
    clearCookies(): Promise<void>;
    setPermissions(origin: string, permissions: string[]): Promise<void>;
    clearPermissions(): Promise<void>;
    setGeolocation(geolocation: types.Geolocation | null): Promise<void>;
    close(): Promise<void>;
    static validateOptions(options: BrowserContextOptions): void;
    _browserClosed(): void;
}
