/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { FFBrowser } from '../firefox/ffBrowser';
import { BrowserFetcher, OnProgressCallback, BrowserFetcherOptions } from './browserFetcher';
import * as types from '../types';
import { TimeoutError } from '../errors';
import { LaunchOptions, BrowserType } from './browserType';
import { ConnectOptions } from '../browser';
import { BrowserServer } from './browserServer';
import { BrowserContext } from '../browserContext';
export declare class Firefox implements BrowserType {
    private _projectRoot;
    readonly _revision: string;
    constructor(projectRoot: string, preferredRevision: string);
    downloadBrowserIfNeeded(onProgress?: OnProgressCallback): Promise<void>;
    name(): string;
    launch(options?: LaunchOptions & {
        slowMo?: number;
    }): Promise<FFBrowser>;
    launchServer(options?: LaunchOptions & {
        port?: number;
    }): Promise<BrowserServer>;
    launchPersistent(userDataDir: string, options?: LaunchOptions): Promise<BrowserContext>;
    private _launchServer;
    connect(options: ConnectOptions): Promise<FFBrowser>;
    executablePath(): string;
    get devices(): types.Devices;
    get errors(): {
        TimeoutError: typeof TimeoutError;
    };
    private _defaultArgs;
    _createBrowserFetcher(options?: BrowserFetcherOptions): BrowserFetcher;
    _resolveExecutablePath(): {
        executablePath: string;
        missingText: string | null;
    };
}
