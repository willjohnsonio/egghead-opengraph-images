/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import * as childProcess from 'child_process';
import * as stream from 'stream';
import { TimeoutError } from '../errors';
export declare type LaunchProcessOptions = {
    executablePath: string;
    args: string[];
    env?: {
        [key: string]: string | undefined;
    };
    handleSIGINT?: boolean;
    handleSIGTERM?: boolean;
    handleSIGHUP?: boolean;
    dumpio?: boolean;
    pipe?: boolean;
    tempDir?: string;
    attemptToGracefullyClose: () => Promise<any>;
    onkill: (exitCode: number | null, signal: string | null) => void;
};
declare type LaunchResult = {
    launchedProcess: childProcess.ChildProcess;
    gracefullyClose: () => Promise<void>;
};
export declare function launchProcess(options: LaunchProcessOptions): Promise<LaunchResult>;
export declare function waitForLine(process: childProcess.ChildProcess, inputStream: stream.Readable, regex: RegExp, timeout: number, timeoutError: TimeoutError): Promise<RegExpMatchArray>;
export {};
