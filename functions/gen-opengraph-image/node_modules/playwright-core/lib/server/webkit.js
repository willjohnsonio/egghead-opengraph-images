"use strict";
/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const browserFetcher_1 = require("./browserFetcher");
const deviceDescriptors_1 = require("../deviceDescriptors");
const errors_1 = require("../errors");
const wkBrowser_1 = require("../webkit/wkBrowser");
const child_process_1 = require("child_process");
const pipeTransport_1 = require("./pipeTransport");
const processLauncher_1 = require("./processLauncher");
const fs = require("fs");
const path = require("path");
const platform = require("../platform");
const util = require("util");
const os = require("os");
const helper_1 = require("../helper");
const wkConnection_1 = require("../webkit/wkConnection");
const transport_1 = require("../transport");
const ws = require("ws");
const uuidv4 = require("uuid/v4");
const browserServer_1 = require("./browserServer");
const events_1 = require("../events");
class WebKit {
    constructor(projectRoot, preferredRevision) {
        this._projectRoot = projectRoot;
        this._revision = preferredRevision;
    }
    name() {
        return 'webkit';
    }
    async downloadBrowserIfNeeded(onProgress) {
        const fetcher = this._createBrowserFetcher();
        const revisionInfo = fetcher.revisionInfo();
        // Do nothing if the revision is already downloaded.
        if (revisionInfo.local)
            return;
        await fetcher.download(revisionInfo.revision, onProgress);
    }
    async launch(options) {
        if (options && options.userDataDir)
            throw new Error('userDataDir option is not supported in `browserType.launch`. Use `browserType.launchPersistent` instead');
        const { browserServer, transport } = await this._launchServer(options, 'local');
        const browser = await wkBrowser_1.WKBrowser.connect(transport, options && options.slowMo);
        // Hack: for typical launch scenario, ensure that close waits for actual process termination.
        browser.close = () => browserServer.close();
        browser['__server__'] = browserServer;
        return browser;
    }
    async launchServer(options) {
        return (await this._launchServer(options, 'server', undefined, options && options.port)).browserServer;
    }
    async launchPersistent(userDataDir, options) {
        const { timeout = 30000 } = options || {};
        const { browserServer, transport } = await this._launchServer(options, 'persistent', userDataDir);
        const browser = await wkBrowser_1.WKBrowser.connect(transport);
        await helper_1.helper.waitWithTimeout(browser._waitForFirstPageTarget(), 'first page', timeout);
        // Hack: for typical launch scenario, ensure that close waits for actual process termination.
        const browserContext = browser._defaultContext;
        browserContext.close = () => browserServer.close();
        return browserContext;
    }
    async _launchServer(options = {}, launchType, userDataDir, port) {
        const { ignoreDefaultArgs = false, args = [], dumpio = false, executablePath = null, env = process.env, handleSIGINT = true, handleSIGTERM = true, handleSIGHUP = true, timeout = 30000 } = options;
        let temporaryUserDataDir = null;
        if (!userDataDir) {
            userDataDir = await mkdtempAsync(WEBKIT_PROFILE_PATH);
            temporaryUserDataDir = userDataDir;
        }
        const webkitArguments = [];
        if (!ignoreDefaultArgs)
            webkitArguments.push(...this._defaultArgs(options, userDataDir, port || 0));
        else if (Array.isArray(ignoreDefaultArgs))
            webkitArguments.push(...this._defaultArgs(options, userDataDir, port || 0).filter(arg => ignoreDefaultArgs.indexOf(arg) === -1));
        else
            webkitArguments.push(...args);
        let webkitExecutable = executablePath;
        if (!executablePath) {
            const { missingText, executablePath } = this._resolveExecutablePath();
            if (missingText)
                throw new Error(missingText);
            webkitExecutable = executablePath;
        }
        let transport = undefined;
        let browserServer = undefined;
        const { launchedProcess, gracefullyClose } = await processLauncher_1.launchProcess({
            executablePath: webkitExecutable,
            args: webkitArguments,
            env: { ...env, CURL_COOKIE_JAR_PATH: path.join(userDataDir, 'cookiejar.db') },
            handleSIGINT,
            handleSIGTERM,
            handleSIGHUP,
            dumpio,
            pipe: true,
            tempDir: temporaryUserDataDir || undefined,
            attemptToGracefullyClose: async () => {
                if (!transport)
                    return Promise.reject();
                // We try to gracefully close to prevent crash reporting and core dumps.
                // Note that it's fine to reuse the pipe transport, since
                // our connection ignores kBrowserCloseMessageId.
                const message = JSON.stringify({ method: 'Browser.close', params: {}, id: wkConnection_1.kBrowserCloseMessageId });
                transport.send(message);
            },
            onkill: (exitCode, signal) => {
                if (browserServer)
                    browserServer.emit(events_1.Events.BrowserServer.Close, exitCode, signal);
            },
        });
        const timeoutError = new errors_1.TimeoutError(`Timed out after ${timeout} ms while trying to connect to WebKit! The only WebKit revision guaranteed to work is r${this._revision}`);
        await processLauncher_1.waitForLine(launchedProcess, launchedProcess.stdout, /^Web Inspector is reading from pipe #3$/, timeout, timeoutError);
        transport = new transport_1.DeferWriteTransport(new pipeTransport_1.PipeTransport(launchedProcess.stdio[3], launchedProcess.stdio[4]));
        browserServer = new browserServer_1.BrowserServer(launchedProcess, gracefullyClose, launchType === 'server' ? await wrapTransportWithWebSocket(transport, port || 0) : null);
        return { browserServer, transport };
    }
    async connect(options) {
        const transport = new platform.WebSocketTransport(options.wsEndpoint);
        return wkBrowser_1.WKBrowser.connect(transport, options.slowMo);
    }
    executablePath() {
        return this._resolveExecutablePath().executablePath;
    }
    get devices() {
        return deviceDescriptors_1.DeviceDescriptors;
    }
    get errors() {
        return { TimeoutError: errors_1.TimeoutError };
    }
    _defaultArgs(options = {}, userDataDir, port) {
        const { devtools = false, headless = !devtools, args = [], } = options;
        if (devtools)
            throw new Error('Option "devtools" is not supported by WebKit');
        const userDataDirArg = args.find(arg => arg.startsWith('--user-data-dir='));
        if (userDataDirArg)
            throw new Error('Pass userDataDir parameter instead of specifying --user-data-dir argument');
        const webkitArguments = ['--inspector-pipe'];
        if (headless)
            webkitArguments.push('--headless');
        webkitArguments.push(`--user-data-dir=${userDataDir}`);
        webkitArguments.push(...args);
        return webkitArguments;
    }
    _createBrowserFetcher(options) {
        const downloadURLs = {
            linux: '%s/builds/webkit/%s/minibrowser-gtk-wpe.zip',
            mac: '%s/builds/webkit/%s/minibrowser-mac-%s.zip',
            win64: '%s/builds/webkit/%s/minibrowser-win64.zip',
        };
        const defaultOptions = {
            path: path.join(this._projectRoot, '.local-webkit'),
            host: 'https://playwright.azureedge.net',
            platform: (() => {
                const platform = os.platform();
                if (platform === 'darwin')
                    return 'mac';
                if (platform === 'linux')
                    return 'linux';
                if (platform === 'win32')
                    return 'win64';
                return platform;
            })()
        };
        options = {
            ...defaultOptions,
            ...options,
        };
        helper_1.assert(!!downloadURLs[options.platform], 'Unsupported platform: ' + options.platform);
        return new browserFetcher_1.BrowserFetcher(options.path, options.platform, this._revision, (platform, revision) => {
            return {
                downloadUrl: (platform === 'mac') ?
                    util.format(downloadURLs[platform], options.host, revision, getMacVersion()) :
                    util.format(downloadURLs[platform], options.host, revision),
                executablePath: platform.startsWith('win') ? 'MiniBrowser.exe' : 'pw_run.sh',
            };
        });
    }
    _resolveExecutablePath() {
        const browserFetcher = this._createBrowserFetcher();
        const revisionInfo = browserFetcher.revisionInfo();
        const missingText = !revisionInfo.local ? `WebKit revision is not downloaded. Run "npm install"` : null;
        return { executablePath: revisionInfo.executablePath, missingText };
    }
}
exports.WebKit = WebKit;
const mkdtempAsync = platform.promisify(fs.mkdtemp);
const WEBKIT_PROFILE_PATH = path.join(os.tmpdir(), 'playwright_dev_profile-');
let cachedMacVersion = undefined;
function getMacVersion() {
    if (!cachedMacVersion) {
        const [major, minor] = child_process_1.execSync('sw_vers -productVersion').toString('utf8').trim().split('.');
        helper_1.assert(+major === 10 && +minor >= 14, 'Error: unsupported macOS version, macOS 10.14 and newer are supported');
        cachedMacVersion = major + '.' + minor;
    }
    return cachedMacVersion;
}
class SequenceNumberMixer {
    constructor() {
        this._values = new Map();
    }
    generate(value) {
        const sequenceNumber = ++SequenceNumberMixer._lastSequenceNumber;
        this._values.set(sequenceNumber, value);
        return sequenceNumber;
    }
    take(sequenceNumber) {
        const value = this._values.get(sequenceNumber);
        this._values.delete(sequenceNumber);
        return value;
    }
}
SequenceNumberMixer._lastSequenceNumber = 1;
async function wrapTransportWithWebSocket(transport, port) {
    const server = new ws.Server({ port });
    const guid = uuidv4();
    const idMixer = new SequenceNumberMixer();
    const pendingBrowserContextCreations = new Set();
    const pendingBrowserContextDeletions = new Map();
    const browserContextIds = new Map();
    const pageProxyIds = new Map();
    const sockets = new Set();
    transport.onmessage = message => {
        const parsedMessage = JSON.parse(message);
        if ('id' in parsedMessage) {
            if (parsedMessage.id === -9999)
                return;
            // Process command response.
            const value = idMixer.take(parsedMessage.id);
            if (!value)
                return;
            const { id, socket } = value;
            if (!socket || socket.readyState === ws.CLOSING) {
                if (pendingBrowserContextCreations.has(id)) {
                    transport.send(JSON.stringify({
                        id: ++SequenceNumberMixer._lastSequenceNumber,
                        method: 'Browser.deleteContext',
                        params: { browserContextId: parsedMessage.result.browserContextId }
                    }));
                }
                return;
            }
            if (pendingBrowserContextCreations.has(parsedMessage.id)) {
                // Browser.createContext response -> establish context attribution.
                browserContextIds.set(parsedMessage.result.browserContextId, socket);
                pendingBrowserContextCreations.delete(parsedMessage.id);
            }
            const deletedContextId = pendingBrowserContextDeletions.get(parsedMessage.id);
            if (deletedContextId) {
                // Browser.deleteContext response -> remove context attribution.
                browserContextIds.delete(deletedContextId);
                pendingBrowserContextDeletions.delete(parsedMessage.id);
            }
            parsedMessage.id = id;
            socket.send(JSON.stringify(parsedMessage));
            return;
        }
        // Process notification response.
        const { method, params, pageProxyId } = parsedMessage;
        if (pageProxyId) {
            const socket = pageProxyIds.get(pageProxyId);
            if (!socket || socket.readyState === ws.CLOSING) {
                // Drop unattributed messages on the floor.
                return;
            }
            socket.send(message);
            return;
        }
        if (method === 'Browser.pageProxyCreated') {
            const socket = browserContextIds.get(params.pageProxyInfo.browserContextId);
            if (!socket || socket.readyState === ws.CLOSING) {
                // Drop unattributed messages on the floor.
                return;
            }
            pageProxyIds.set(params.pageProxyInfo.pageProxyId, socket);
            socket.send(message);
            return;
        }
        if (method === 'Browser.pageProxyDestroyed') {
            const socket = pageProxyIds.get(params.pageProxyId);
            pageProxyIds.delete(params.pageProxyId);
            if (socket && socket.readyState !== ws.CLOSING)
                socket.send(message);
            return;
        }
        if (method === 'Browser.provisionalLoadFailed') {
            const socket = pageProxyIds.get(params.pageProxyId);
            if (socket && socket.readyState !== ws.CLOSING)
                socket.send(message);
            return;
        }
    };
    server.on('connection', (socket, req) => {
        if (req.url !== '/' + guid) {
            socket.close();
            return;
        }
        sockets.add(socket);
        // Following two messages are reporting the default browser context and the default page.
        socket.send(JSON.stringify({
            method: 'Browser.pageProxyCreated',
            params: { pageProxyInfo: { pageProxyId: '5', browserContextId: '0000000000000002' } }
        }));
        socket.send(JSON.stringify({
            method: 'Target.targetCreated',
            params: {
                targetInfo: { targetId: 'page-6', type: 'page', isPaused: false }
            },
            pageProxyId: '5'
        }));
        socket.on('message', (message) => {
            const parsedMessage = JSON.parse(Buffer.from(message).toString());
            const { id, method, params } = parsedMessage;
            const seqNum = idMixer.generate({ id, socket });
            transport.send(JSON.stringify({ ...parsedMessage, id: seqNum }));
            if (method === 'Browser.createContext')
                pendingBrowserContextCreations.add(seqNum);
            if (method === 'Browser.deleteContext')
                pendingBrowserContextDeletions.set(seqNum, params.browserContextId);
        });
        socket.on('close', () => {
            for (const [pageProxyId, s] of pageProxyIds) {
                if (s === socket)
                    pageProxyIds.delete(pageProxyId);
            }
            for (const [browserContextId, s] of browserContextIds) {
                if (s === socket) {
                    transport.send(JSON.stringify({
                        id: ++SequenceNumberMixer._lastSequenceNumber,
                        method: 'Browser.deleteContext',
                        params: { browserContextId }
                    }));
                    browserContextIds.delete(browserContextId);
                }
            }
            sockets.delete(socket);
        });
    });
    transport.onclose = () => {
        for (const socket of sockets)
            socket.close(undefined, 'Browser disconnected');
        server.close();
        transport.onmessage = undefined;
        transport.onclose = undefined;
    };
    const address = server.address();
    if (typeof address === 'string')
        return address + '/' + guid;
    return 'ws://127.0.0.1:' + address.port + '/' + guid;
}
//# sourceMappingURL=webkit.js.map