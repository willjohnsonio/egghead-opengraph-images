/**
 * Copyright 2018 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
export interface ConnectionTransport {
    send(s: string): void;
    close(): void;
    onmessage?: (message: string) => void;
    onclose?: () => void;
}
export declare class SlowMoTransport {
    private readonly _delay;
    private readonly _delegate;
    private _incomingMessageQueue;
    private _dispatchTimerId?;
    onmessage?: (message: string) => void;
    onclose?: () => void;
    static wrap(transport: ConnectionTransport, delay?: number): ConnectionTransport;
    constructor(transport: ConnectionTransport, delay: number);
    private _enqueueMessage;
    private _scheduleQueueDispatch;
    private _dispatchOneMessageFromQueue;
    private _onClose;
    send(s: string): void;
    close(): void;
}
export declare class DeferWriteTransport implements ConnectionTransport {
    private _delegate;
    private _readPromise;
    onmessage?: (message: string) => void;
    onclose?: () => void;
    constructor(transport: ConnectionTransport);
    send(s: string): Promise<void>;
    close(): void;
}
