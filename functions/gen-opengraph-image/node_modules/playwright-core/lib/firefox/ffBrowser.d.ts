/**
 * Copyright 2018 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the 'License');
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an 'AS IS' BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Browser } from '../browser';
import { BrowserContext, BrowserContextOptions } from '../browserContext';
import { Page } from '../page';
import { FFConnection, FFSession } from './ffConnection';
import { FFPage } from './ffPage';
import * as platform from '../platform';
import { Protocol } from './protocol';
import { ConnectionTransport } from '../transport';
export declare class FFBrowser extends platform.EventEmitter implements Browser {
    _connection: FFConnection;
    _targets: Map<string, Target>;
    readonly _defaultContext: BrowserContext;
    private _contexts;
    private _eventListeners;
    static connect(transport: ConnectionTransport, slowMo?: number): Promise<FFBrowser>;
    constructor(connection: FFConnection);
    isConnected(): boolean;
    newContext(options?: BrowserContextOptions): Promise<BrowserContext>;
    contexts(): BrowserContext[];
    newPage(options?: BrowserContextOptions): Promise<Page>;
    _waitForTarget(predicate: (target: Target) => boolean, options?: {
        timeout?: number;
    }): Promise<Target>;
    _allTargets(): Target[];
    _onTargetCreated(payload: Protocol.Target.targetCreatedPayload): Promise<void>;
    _onTargetDestroyed(payload: Protocol.Target.targetDestroyedPayload): void;
    _onTargetInfoChanged(payload: Protocol.Target.targetInfoChangedPayload): void;
    _onAttachedToTarget(payload: Protocol.Target.attachedToTargetPayload): Promise<void>;
    close(): Promise<void>;
    _createBrowserContext(browserContextId: string | null, options: BrowserContextOptions): BrowserContext;
    _setDebugFunction(debugFunction: (message: string) => void): void;
}
declare class Target {
    _pagePromise?: Promise<Page>;
    _ffPage: FFPage | null;
    private readonly _browser;
    private readonly _context;
    private readonly _connection;
    private readonly _targetId;
    private readonly _type;
    _url: string;
    private readonly _openerId;
    constructor(connection: any, browser: FFBrowser, context: BrowserContext, targetId: string, type: 'page' | 'browser', url: string, openerId: string | undefined);
    _didClose(): void;
    opener(): Target | null;
    type(): 'page' | 'browser';
    url(): string;
    context(): BrowserContext;
    page(): Promise<Page>;
    _initPagePromise(session: FFSession): void;
    browser(): FFBrowser;
}
export {};
