export declare module Protocol {
    module Browser {
        type CookieOptions = {
            name: string;
            value: string;
            url?: string;
            domain?: string;
            path?: string;
            secure?: boolean;
            httpOnly?: boolean;
            sameSite?: ("Strict" | "Lax" | "None");
            expires?: number;
        };
        type Cookie = {
            name: string;
            domain: string;
            path: string;
            value: string;
            expires: number;
            size: number;
            httpOnly: boolean;
            secure: boolean;
            session: boolean;
            sameSite: ("Strict" | "Lax" | "None");
        };
        type closeParameters = void;
        type closeReturnValue = void;
        type getInfoParameters = void;
        type getInfoReturnValue = {
            userAgent: string;
            version: string;
        };
        type setIgnoreHTTPSErrorsParameters = {
            enabled: boolean;
        };
        type setIgnoreHTTPSErrorsReturnValue = void;
        type grantPermissionsParameters = {
            origin: string;
            browserContextId?: string;
            permissions: ("geo" | "microphone" | "camera" | "desktop-notifications")[];
        };
        type grantPermissionsReturnValue = void;
        type resetPermissionsParameters = {
            browserContextId?: string;
        };
        type resetPermissionsReturnValue = void;
        type setCookiesParameters = {
            browserContextId?: string;
            cookies: {
                name: string;
                value: string;
                url?: string;
                domain?: string;
                path?: string;
                secure?: boolean;
                httpOnly?: boolean;
                sameSite?: ("Strict" | "Lax" | "None");
                expires?: number;
            }[];
        };
        type setCookiesReturnValue = void;
        type clearCookiesParameters = {
            browserContextId?: string;
        };
        type clearCookiesReturnValue = void;
        type getCookiesParameters = {
            browserContextId?: string;
        };
        type getCookiesReturnValue = {
            cookies: {
                name: string;
                domain: string;
                path: string;
                value: string;
                expires: number;
                size: number;
                httpOnly: boolean;
                secure: boolean;
                session: boolean;
                sameSite: ("Strict" | "Lax" | "None");
            }[];
        };
    }
    module Target {
        type TargetInfo = {
            type: ("page" | "browser");
            targetId: string;
            browserContextId?: string;
            url: string;
            openerId?: string;
        };
        type attachedToTargetPayload = {
            sessionId: string;
            targetInfo: {
                type: ("page" | "browser");
                targetId: string;
                browserContextId?: string;
                url: string;
                openerId?: string;
            };
        };
        type detachedFromTargetPayload = {
            sessionId: string;
        };
        type targetCreatedPayload = {
            type: ("page" | "browser");
            targetId: string;
            browserContextId?: string;
            url: string;
            openerId?: string;
        };
        type targetDestroyedPayload = {
            type: ("page" | "browser");
            targetId: string;
            browserContextId?: string;
            url: string;
            openerId?: string;
        };
        type targetInfoChangedPayload = {
            type: ("page" | "browser");
            targetId: string;
            browserContextId?: string;
            url: string;
            openerId?: string;
        };
        type enableParameters = void;
        type enableReturnValue = void;
        type attachToTargetParameters = {
            targetId: string;
        };
        type attachToTargetReturnValue = {
            sessionId: string;
        };
        type newPageParameters = {
            browserContextId?: string;
        };
        type newPageReturnValue = {
            targetId: string;
        };
        type createBrowserContextParameters = {
            removeOnDetach?: boolean;
            userAgent?: string;
            bypassCSP?: boolean;
            javaScriptDisabled?: boolean;
            viewport?: {
                viewportSize: {
                    width: number;
                    height: number;
                };
                deviceScaleFactor: number;
                isMobile: boolean;
                hasTouch: boolean;
            };
        };
        type createBrowserContextReturnValue = {
            browserContextId: string;
        };
        type removeBrowserContextParameters = {
            browserContextId: string;
        };
        type removeBrowserContextReturnValue = void;
        type getBrowserContextsParameters = void;
        type getBrowserContextsReturnValue = {
            browserContextIds: string[];
        };
    }
    module Page {
        type DOMPoint = {
            x: number;
            y: number;
        };
        type Rect = {
            x: number;
            y: number;
            width: number;
            height: number;
        };
        type Size = {
            width: number;
            height: number;
        };
        type Viewport = {
            viewportSize: {
                width: number;
                height: number;
            };
            deviceScaleFactor: number;
            isMobile: boolean;
            hasTouch: boolean;
        };
        type DOMQuad = {
            p1: {
                x: number;
                y: number;
            };
            p2: {
                x: number;
                y: number;
            };
            p3: {
                x: number;
                y: number;
            };
            p4: {
                x: number;
                y: number;
            };
        };
        type TouchPoint = {
            x: number;
            y: number;
            radiusX?: number;
            radiusY?: number;
            rotationAngle?: number;
            force?: number;
        };
        type Clip = {
            x: number;
            y: number;
            width: number;
            height: number;
        };
        type readyPayload = {};
        type crashedPayload = {};
        type eventFiredPayload = {
            frameId: string;
            name: ("load" | "DOMContentLoaded");
        };
        type uncaughtErrorPayload = {
            frameId: string;
            message: string;
            stack: string;
        };
        type frameAttachedPayload = {
            frameId: string;
            parentFrameId?: string;
        };
        type frameDetachedPayload = {
            frameId: string;
        };
        type navigationStartedPayload = {
            frameId: string;
            navigationId: string;
            url: string;
        };
        type navigationCommittedPayload = {
            frameId: string;
            navigationId?: string;
            url: string;
            name: string;
        };
        type navigationAbortedPayload = {
            frameId: string;
            navigationId: string;
            errorText: string;
        };
        type sameDocumentNavigationPayload = {
            frameId: string;
            url: string;
        };
        type dialogOpenedPayload = {
            dialogId: string;
            type: ("prompt" | "alert" | "confirm" | "beforeunload");
            message: string;
            defaultValue?: string;
        };
        type dialogClosedPayload = {
            dialogId: string;
        };
        type bindingCalledPayload = {
            executionContextId: string;
            name: string;
            payload: any;
        };
        type fileChooserOpenedPayload = {
            executionContextId: string;
            element: {
                type?: ("object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint");
                subtype?: ("array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "error" | "proxy" | "promise" | "typedarray");
                objectId?: string;
                unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
                value: any;
            };
        };
        type workerCreatedPayload = {
            workerId: string;
            frameId: string;
            url: string;
        };
        type workerDestroyedPayload = {
            workerId: string;
        };
        type dispatchMessageFromWorkerPayload = {
            workerId: string;
            message: string;
        };
        type closeParameters = {
            runBeforeUnload?: boolean;
        };
        type closeReturnValue = void;
        type setFileInputFilesParameters = {
            frameId: string;
            objectId: string;
            files: string[];
        };
        type setFileInputFilesReturnValue = void;
        type addBindingParameters = {
            name: string;
        };
        type addBindingReturnValue = void;
        type setViewportSizeParameters = {
            viewportSize: {
                width: number;
                height: number;
            } | null;
        };
        type setViewportSizeReturnValue = void;
        type setEmulatedMediaParameters = {
            type?: ("screen" | "print" | "");
            colorScheme?: ("dark" | "light" | "no-preference");
        };
        type setEmulatedMediaReturnValue = void;
        type setCacheDisabledParameters = {
            cacheDisabled: boolean;
        };
        type setCacheDisabledReturnValue = void;
        type describeNodeParameters = {
            frameId: string;
            objectId: string;
        };
        type describeNodeReturnValue = {
            contentFrameId?: string;
            ownerFrameId?: string;
        };
        type scrollIntoViewIfNeededParameters = {
            frameId: string;
            objectId: string;
            rect?: {
                x: number;
                y: number;
                width: number;
                height: number;
            };
        };
        type scrollIntoViewIfNeededReturnValue = void;
        type addScriptToEvaluateOnNewDocumentParameters = {
            script: string;
            worldName?: string;
        };
        type addScriptToEvaluateOnNewDocumentReturnValue = {
            scriptId: string;
        };
        type removeScriptToEvaluateOnNewDocumentParameters = {
            scriptId: string;
        };
        type removeScriptToEvaluateOnNewDocumentReturnValue = void;
        type navigateParameters = {
            frameId: string;
            url: string;
            referer?: string;
        };
        type navigateReturnValue = {
            navigationId: string | null;
            navigationURL: string | null;
        };
        type goBackParameters = {
            frameId: string;
        };
        type goBackReturnValue = {
            navigationId: string | null;
            navigationURL: string | null;
        };
        type goForwardParameters = {
            frameId: string;
        };
        type goForwardReturnValue = {
            navigationId: string | null;
            navigationURL: string | null;
        };
        type reloadParameters = {
            frameId: string;
        };
        type reloadReturnValue = {
            navigationId: string;
            navigationURL: string;
        };
        type getBoundingBoxParameters = {
            frameId: string;
            objectId: string;
        };
        type getBoundingBoxReturnValue = {
            boundingBox: {
                x: number;
                y: number;
                width: number;
                height: number;
            } | null;
        };
        type adoptNodeParameters = {
            frameId: string;
            objectId: string;
            executionContextId: string;
        };
        type adoptNodeReturnValue = {
            remoteObject: {
                type?: ("object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint");
                subtype?: ("array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "error" | "proxy" | "promise" | "typedarray");
                objectId?: string;
                unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
                value: any;
            } | null;
        };
        type screenshotParameters = {
            mimeType: ("image/png" | "image/jpeg");
            fullPage?: boolean;
            clip?: {
                x: number;
                y: number;
                width: number;
                height: number;
            };
        };
        type screenshotReturnValue = {
            data: string;
        };
        type getContentQuadsParameters = {
            frameId: string;
            objectId: string;
        };
        type getContentQuadsReturnValue = {
            quads: {
                p1: {
                    x: number;
                    y: number;
                };
                p2: {
                    x: number;
                    y: number;
                };
                p3: {
                    x: number;
                    y: number;
                };
                p4: {
                    x: number;
                    y: number;
                };
            }[];
        };
        type dispatchKeyEventParameters = {
            type: string;
            key: string;
            keyCode: number;
            location: number;
            code: string;
            repeat: boolean;
            text?: string;
        };
        type dispatchKeyEventReturnValue = void;
        type dispatchTouchEventParameters = {
            type: ("touchStart" | "touchEnd" | "touchMove" | "touchCancel");
            touchPoints: {
                x: number;
                y: number;
                radiusX?: number;
                radiusY?: number;
                rotationAngle?: number;
                force?: number;
            }[];
            modifiers: number;
        };
        type dispatchTouchEventReturnValue = {
            defaultPrevented: boolean;
        };
        type dispatchMouseEventParameters = {
            type: string;
            button: number;
            x: number;
            y: number;
            modifiers: number;
            clickCount?: number;
            buttons: number;
        };
        type dispatchMouseEventReturnValue = void;
        type insertTextParameters = {
            text: string;
        };
        type insertTextReturnValue = void;
        type crashParameters = {};
        type crashReturnValue = void;
        type handleDialogParameters = {
            dialogId: string;
            accept: boolean;
            promptText?: string;
        };
        type handleDialogReturnValue = void;
        type setInterceptFileChooserDialogParameters = {
            enabled: boolean;
        };
        type setInterceptFileChooserDialogReturnValue = void;
        type sendMessageToWorkerParameters = {
            frameId: string;
            workerId: string;
            message: string;
        };
        type sendMessageToWorkerReturnValue = void;
    }
    module Runtime {
        type RemoteObject = {
            type?: ("object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint");
            subtype?: ("array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "error" | "proxy" | "promise" | "typedarray");
            objectId?: string;
            unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
            value: any;
        };
        type ObjectProperty = {
            name: string;
            value: {
                type?: ("object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint");
                subtype?: ("array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "error" | "proxy" | "promise" | "typedarray");
                objectId?: string;
                unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
                value: any;
            };
        };
        type ScriptLocation = {
            columnNumber: number;
            lineNumber: number;
            url: string;
        };
        type ExceptionDetails = {
            text?: string;
            stack?: string;
            value?: any;
        };
        type CallFunctionArgument = {
            objectId?: string;
            unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
            value: any;
        };
        type executionContextCreatedPayload = {
            executionContextId: string;
            auxData: any;
        };
        type executionContextDestroyedPayload = {
            executionContextId: string;
        };
        type consolePayload = {
            executionContextId: string;
            args: {
                type?: ("object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint");
                subtype?: ("array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "error" | "proxy" | "promise" | "typedarray");
                objectId?: string;
                unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
                value: any;
            }[];
            type: string;
            location: {
                columnNumber: number;
                lineNumber: number;
                url: string;
            };
        };
        type evaluateParameters = {
            executionContextId: string;
            expression: string;
            returnByValue?: boolean;
        };
        type evaluateReturnValue = {
            result?: {
                type?: ("object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint");
                subtype?: ("array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "error" | "proxy" | "promise" | "typedarray");
                objectId?: string;
                unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
                value: any;
            };
            exceptionDetails?: {
                text?: string;
                stack?: string;
                value?: any;
            };
        };
        type callFunctionParameters = {
            executionContextId: string;
            functionDeclaration: string;
            returnByValue?: boolean;
            args: {
                objectId?: string;
                unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
                value: any;
            }[];
        };
        type callFunctionReturnValue = {
            result?: {
                type?: ("object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint");
                subtype?: ("array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "error" | "proxy" | "promise" | "typedarray");
                objectId?: string;
                unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
                value: any;
            };
            exceptionDetails?: {
                text?: string;
                stack?: string;
                value?: any;
            };
        };
        type disposeObjectParameters = {
            executionContextId: string;
            objectId: string;
        };
        type disposeObjectReturnValue = void;
        type getObjectPropertiesParameters = {
            executionContextId: string;
            objectId: string;
        };
        type getObjectPropertiesReturnValue = {
            properties: {
                name: string;
                value: {
                    type?: ("object" | "function" | "undefined" | "string" | "number" | "boolean" | "symbol" | "bigint");
                    subtype?: ("array" | "null" | "node" | "regexp" | "date" | "map" | "set" | "weakmap" | "weakset" | "error" | "proxy" | "promise" | "typedarray");
                    objectId?: string;
                    unserializableValue?: ("Infinity" | "-Infinity" | "-0" | "NaN");
                    value: any;
                };
            }[];
        };
    }
    module Network {
        type HTTPHeader = {
            name: string;
            value: string;
        };
        type SecurityDetails = {
            protocol: string;
            subjectName: string;
            issuer: string;
            validFrom: number;
            validTo: number;
        };
        type requestWillBeSentPayload = {
            frameId?: string;
            requestId: string;
            redirectedFrom?: string;
            postData?: string;
            headers: {
                name: string;
                value: string;
            }[];
            isIntercepted: boolean;
            url: string;
            method: string;
            navigationId?: string;
            cause: string;
        };
        type responseReceivedPayload = {
            securityDetails: {
                protocol: string;
                subjectName: string;
                issuer: string;
                validFrom: number;
                validTo: number;
            } | null;
            requestId: string;
            fromCache: boolean;
            remoteIPAddress?: string;
            remotePort?: number;
            status: number;
            statusText: string;
            headers: {
                name: string;
                value: string;
            }[];
        };
        type requestFinishedPayload = {
            requestId: string;
        };
        type requestFailedPayload = {
            requestId: string;
            errorCode: string;
        };
        type setRequestInterceptionParameters = {
            enabled: boolean;
        };
        type setRequestInterceptionReturnValue = void;
        type setExtraHTTPHeadersParameters = {
            headers: {
                name: string;
                value: string;
            }[];
        };
        type setExtraHTTPHeadersReturnValue = void;
        type abortInterceptedRequestParameters = {
            requestId: string;
            errorCode: string;
        };
        type abortInterceptedRequestReturnValue = void;
        type resumeInterceptedRequestParameters = {
            requestId: string;
            method?: string;
            headers?: {
                name: string;
                value: string;
            }[];
            postData?: string;
        };
        type resumeInterceptedRequestReturnValue = void;
        type fulfillInterceptedRequestParameters = {
            requestId: string;
            status: number;
            statusText: string;
            headers: {
                name: string;
                value: string;
            }[];
            base64body?: string;
        };
        type fulfillInterceptedRequestReturnValue = void;
        type getResponseBodyParameters = {
            requestId: string;
        };
        type getResponseBodyReturnValue = {
            base64body: string;
            evicted?: boolean;
        };
        type setAuthCredentialsParameters = {
            username: string | null;
            password: string | null;
        };
        type setAuthCredentialsReturnValue = void;
    }
    module Accessibility {
        type AXTree = {
            role: string;
            name: string;
            children?: AXTree[];
            selected?: boolean;
            focused?: boolean;
            pressed?: boolean;
            focusable?: boolean;
            haspopup?: boolean;
            required?: boolean;
            invalid?: boolean;
            modal?: boolean;
            editable?: boolean;
            busy?: boolean;
            multiline?: boolean;
            readonly?: boolean;
            checked?: ("mixed" | true);
            expanded?: boolean;
            disabled?: boolean;
            multiselectable?: boolean;
            value?: string;
            description?: string;
            roledescription?: string;
            valuetext?: string;
            orientation?: string;
            autocomplete?: string;
            keyshortcuts?: string;
            level?: number;
            tag?: string;
            foundObject?: boolean;
        };
        type getFullAXTreeParameters = {
            objectId?: string;
        };
        type getFullAXTreeReturnValue = {
            tree: {
                role: string;
                name: string;
                children?: AXTree[];
                selected?: boolean;
                focused?: boolean;
                pressed?: boolean;
                focusable?: boolean;
                haspopup?: boolean;
                required?: boolean;
                invalid?: boolean;
                modal?: boolean;
                editable?: boolean;
                busy?: boolean;
                multiline?: boolean;
                readonly?: boolean;
                checked?: ("mixed" | true);
                expanded?: boolean;
                disabled?: boolean;
                multiselectable?: boolean;
                value?: string;
                description?: string;
                roledescription?: string;
                valuetext?: string;
                orientation?: string;
                autocomplete?: string;
                keyshortcuts?: string;
                level?: number;
                tag?: string;
                foundObject?: boolean;
            };
        };
    }
    interface Events {
        "Target.attachedToTarget": Target.attachedToTargetPayload;
        "Target.detachedFromTarget": Target.detachedFromTargetPayload;
        "Target.targetCreated": Target.targetCreatedPayload;
        "Target.targetDestroyed": Target.targetDestroyedPayload;
        "Target.targetInfoChanged": Target.targetInfoChangedPayload;
        "Page.ready": Page.readyPayload;
        "Page.crashed": Page.crashedPayload;
        "Page.eventFired": Page.eventFiredPayload;
        "Page.uncaughtError": Page.uncaughtErrorPayload;
        "Page.frameAttached": Page.frameAttachedPayload;
        "Page.frameDetached": Page.frameDetachedPayload;
        "Page.navigationStarted": Page.navigationStartedPayload;
        "Page.navigationCommitted": Page.navigationCommittedPayload;
        "Page.navigationAborted": Page.navigationAbortedPayload;
        "Page.sameDocumentNavigation": Page.sameDocumentNavigationPayload;
        "Page.dialogOpened": Page.dialogOpenedPayload;
        "Page.dialogClosed": Page.dialogClosedPayload;
        "Page.bindingCalled": Page.bindingCalledPayload;
        "Page.fileChooserOpened": Page.fileChooserOpenedPayload;
        "Page.workerCreated": Page.workerCreatedPayload;
        "Page.workerDestroyed": Page.workerDestroyedPayload;
        "Page.dispatchMessageFromWorker": Page.dispatchMessageFromWorkerPayload;
        "Runtime.executionContextCreated": Runtime.executionContextCreatedPayload;
        "Runtime.executionContextDestroyed": Runtime.executionContextDestroyedPayload;
        "Runtime.console": Runtime.consolePayload;
        "Network.requestWillBeSent": Network.requestWillBeSentPayload;
        "Network.responseReceived": Network.responseReceivedPayload;
        "Network.requestFinished": Network.requestFinishedPayload;
        "Network.requestFailed": Network.requestFailedPayload;
    }
    interface CommandParameters {
        "Browser.close": Browser.closeParameters;
        "Browser.getInfo": Browser.getInfoParameters;
        "Browser.setIgnoreHTTPSErrors": Browser.setIgnoreHTTPSErrorsParameters;
        "Browser.grantPermissions": Browser.grantPermissionsParameters;
        "Browser.resetPermissions": Browser.resetPermissionsParameters;
        "Browser.setCookies": Browser.setCookiesParameters;
        "Browser.clearCookies": Browser.clearCookiesParameters;
        "Browser.getCookies": Browser.getCookiesParameters;
        "Target.enable": Target.enableParameters;
        "Target.attachToTarget": Target.attachToTargetParameters;
        "Target.newPage": Target.newPageParameters;
        "Target.createBrowserContext": Target.createBrowserContextParameters;
        "Target.removeBrowserContext": Target.removeBrowserContextParameters;
        "Target.getBrowserContexts": Target.getBrowserContextsParameters;
        "Page.close": Page.closeParameters;
        "Page.setFileInputFiles": Page.setFileInputFilesParameters;
        "Page.addBinding": Page.addBindingParameters;
        "Page.setViewportSize": Page.setViewportSizeParameters;
        "Page.setEmulatedMedia": Page.setEmulatedMediaParameters;
        "Page.setCacheDisabled": Page.setCacheDisabledParameters;
        "Page.describeNode": Page.describeNodeParameters;
        "Page.scrollIntoViewIfNeeded": Page.scrollIntoViewIfNeededParameters;
        "Page.addScriptToEvaluateOnNewDocument": Page.addScriptToEvaluateOnNewDocumentParameters;
        "Page.removeScriptToEvaluateOnNewDocument": Page.removeScriptToEvaluateOnNewDocumentParameters;
        "Page.navigate": Page.navigateParameters;
        "Page.goBack": Page.goBackParameters;
        "Page.goForward": Page.goForwardParameters;
        "Page.reload": Page.reloadParameters;
        "Page.getBoundingBox": Page.getBoundingBoxParameters;
        "Page.adoptNode": Page.adoptNodeParameters;
        "Page.screenshot": Page.screenshotParameters;
        "Page.getContentQuads": Page.getContentQuadsParameters;
        "Page.dispatchKeyEvent": Page.dispatchKeyEventParameters;
        "Page.dispatchTouchEvent": Page.dispatchTouchEventParameters;
        "Page.dispatchMouseEvent": Page.dispatchMouseEventParameters;
        "Page.insertText": Page.insertTextParameters;
        "Page.crash": Page.crashParameters;
        "Page.handleDialog": Page.handleDialogParameters;
        "Page.setInterceptFileChooserDialog": Page.setInterceptFileChooserDialogParameters;
        "Page.sendMessageToWorker": Page.sendMessageToWorkerParameters;
        "Runtime.evaluate": Runtime.evaluateParameters;
        "Runtime.callFunction": Runtime.callFunctionParameters;
        "Runtime.disposeObject": Runtime.disposeObjectParameters;
        "Runtime.getObjectProperties": Runtime.getObjectPropertiesParameters;
        "Network.setRequestInterception": Network.setRequestInterceptionParameters;
        "Network.setExtraHTTPHeaders": Network.setExtraHTTPHeadersParameters;
        "Network.abortInterceptedRequest": Network.abortInterceptedRequestParameters;
        "Network.resumeInterceptedRequest": Network.resumeInterceptedRequestParameters;
        "Network.fulfillInterceptedRequest": Network.fulfillInterceptedRequestParameters;
        "Network.getResponseBody": Network.getResponseBodyParameters;
        "Network.setAuthCredentials": Network.setAuthCredentialsParameters;
        "Accessibility.getFullAXTree": Accessibility.getFullAXTreeParameters;
    }
    interface CommandReturnValues {
        "Browser.close": Browser.closeReturnValue;
        "Browser.getInfo": Browser.getInfoReturnValue;
        "Browser.setIgnoreHTTPSErrors": Browser.setIgnoreHTTPSErrorsReturnValue;
        "Browser.grantPermissions": Browser.grantPermissionsReturnValue;
        "Browser.resetPermissions": Browser.resetPermissionsReturnValue;
        "Browser.setCookies": Browser.setCookiesReturnValue;
        "Browser.clearCookies": Browser.clearCookiesReturnValue;
        "Browser.getCookies": Browser.getCookiesReturnValue;
        "Target.enable": Target.enableReturnValue;
        "Target.attachToTarget": Target.attachToTargetReturnValue;
        "Target.newPage": Target.newPageReturnValue;
        "Target.createBrowserContext": Target.createBrowserContextReturnValue;
        "Target.removeBrowserContext": Target.removeBrowserContextReturnValue;
        "Target.getBrowserContexts": Target.getBrowserContextsReturnValue;
        "Page.close": Page.closeReturnValue;
        "Page.setFileInputFiles": Page.setFileInputFilesReturnValue;
        "Page.addBinding": Page.addBindingReturnValue;
        "Page.setViewportSize": Page.setViewportSizeReturnValue;
        "Page.setEmulatedMedia": Page.setEmulatedMediaReturnValue;
        "Page.setCacheDisabled": Page.setCacheDisabledReturnValue;
        "Page.describeNode": Page.describeNodeReturnValue;
        "Page.scrollIntoViewIfNeeded": Page.scrollIntoViewIfNeededReturnValue;
        "Page.addScriptToEvaluateOnNewDocument": Page.addScriptToEvaluateOnNewDocumentReturnValue;
        "Page.removeScriptToEvaluateOnNewDocument": Page.removeScriptToEvaluateOnNewDocumentReturnValue;
        "Page.navigate": Page.navigateReturnValue;
        "Page.goBack": Page.goBackReturnValue;
        "Page.goForward": Page.goForwardReturnValue;
        "Page.reload": Page.reloadReturnValue;
        "Page.getBoundingBox": Page.getBoundingBoxReturnValue;
        "Page.adoptNode": Page.adoptNodeReturnValue;
        "Page.screenshot": Page.screenshotReturnValue;
        "Page.getContentQuads": Page.getContentQuadsReturnValue;
        "Page.dispatchKeyEvent": Page.dispatchKeyEventReturnValue;
        "Page.dispatchTouchEvent": Page.dispatchTouchEventReturnValue;
        "Page.dispatchMouseEvent": Page.dispatchMouseEventReturnValue;
        "Page.insertText": Page.insertTextReturnValue;
        "Page.crash": Page.crashReturnValue;
        "Page.handleDialog": Page.handleDialogReturnValue;
        "Page.setInterceptFileChooserDialog": Page.setInterceptFileChooserDialogReturnValue;
        "Page.sendMessageToWorker": Page.sendMessageToWorkerReturnValue;
        "Runtime.evaluate": Runtime.evaluateReturnValue;
        "Runtime.callFunction": Runtime.callFunctionReturnValue;
        "Runtime.disposeObject": Runtime.disposeObjectReturnValue;
        "Runtime.getObjectProperties": Runtime.getObjectPropertiesReturnValue;
        "Network.setRequestInterception": Network.setRequestInterceptionReturnValue;
        "Network.setExtraHTTPHeaders": Network.setExtraHTTPHeadersReturnValue;
        "Network.abortInterceptedRequest": Network.abortInterceptedRequestReturnValue;
        "Network.resumeInterceptedRequest": Network.resumeInterceptedRequestReturnValue;
        "Network.fulfillInterceptedRequest": Network.fulfillInterceptedRequestReturnValue;
        "Network.getResponseBody": Network.getResponseBodyReturnValue;
        "Network.setAuthCredentials": Network.setAuthCredentialsReturnValue;
        "Accessibility.getFullAXTree": Accessibility.getFullAXTreeReturnValue;
    }
}
