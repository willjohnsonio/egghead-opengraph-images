/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as platform from '../platform';
import { ConnectionTransport } from '../transport';
import { Protocol } from './protocol';
export declare const kBrowserCloseMessageId = -9999;
export declare const kPageProxyMessageReceived = "kPageProxyMessageReceived";
export declare type PageProxyMessageReceivedPayload = {
    pageProxyId: string;
    message: any;
};
export declare class WKConnection {
    private _lastId;
    private readonly _transport;
    private _closed;
    private _onDisconnect;
    _debugFunction: (message: string) => void;
    readonly browserSession: WKSession;
    constructor(transport: ConnectionTransport, onDisconnect: () => void);
    nextMessageId(): number;
    rawSend(message: any): void;
    private _dispatchMessage;
    _onClose(): void;
    isClosed(): boolean;
    close(): void;
}
export declare class WKSession extends platform.EventEmitter {
    connection: WKConnection;
    errorText: string;
    readonly sessionId: string;
    private _disposed;
    private readonly _rawSend;
    private readonly _callbacks;
    on: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
    addListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
    off: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
    removeListener: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
    once: <T extends keyof Protocol.Events | symbol>(event: T, listener: (payload: T extends symbol ? any : Protocol.Events[T extends keyof Protocol.Events ? T : never]) => void) => this;
    constructor(connection: WKConnection, sessionId: string, errorText: string, rawSend: (message: any) => void);
    send<T extends keyof Protocol.CommandParameters>(method: T, params?: Protocol.CommandParameters[T]): Promise<Protocol.CommandReturnValues[T]>;
    isDisposed(): boolean;
    dispose(): void;
    dispatchMessage(object: any): void;
}
export declare function createProtocolError(error: Error, method: string, object: {
    error: {
        message: string;
        data: any;
    };
}): Error;
export declare function rewriteError(error: Error, message: string): Error;
export declare function isSwappedOutError(e: Error): boolean;
