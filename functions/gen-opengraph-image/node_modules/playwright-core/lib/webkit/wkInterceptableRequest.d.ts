/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as frames from '../frames';
import * as network from '../network';
import * as platform from '../platform';
import { Protocol } from './protocol';
import { WKSession } from './wkConnection';
export declare class WKInterceptableRequest implements network.RequestDelegate {
    private readonly _session;
    readonly request: network.Request;
    readonly _requestId: string;
    _interceptedCallback: () => void;
    private _interceptedPromise;
    constructor(session: WKSession, allowInterception: boolean, frame: frames.Frame | null, event: Protocol.Network.requestWillBeSentPayload, redirectChain: network.Request[], documentId: string | undefined);
    abort(errorCode: string): Promise<void>;
    fulfill(response: {
        status: number;
        headers: network.Headers;
        contentType: string;
        body: (string | platform.BufferType);
    }): Promise<void>;
    continue(overrides: {
        method?: string;
        headers?: network.Headers;
        postData?: string;
    }): Promise<void>;
    createResponse(responsePayload: Protocol.Network.Response): network.Response;
}
