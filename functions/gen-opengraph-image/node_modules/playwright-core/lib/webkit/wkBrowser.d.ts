/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Browser } from '../browser';
import { BrowserContext, BrowserContextOptions } from '../browserContext';
import { Page } from '../page';
import { ConnectionTransport } from '../transport';
import { Protocol } from './protocol';
import { PageProxyMessageReceivedPayload } from './wkConnection';
import * as platform from '../platform';
export declare class WKBrowser extends platform.EventEmitter implements Browser {
    private readonly _connection;
    private readonly _browserSession;
    readonly _defaultContext: BrowserContext;
    private readonly _contexts;
    private readonly _pageProxies;
    private readonly _eventListeners;
    private _firstPageProxyCallback?;
    private readonly _firstPageProxyPromise;
    static connect(transport: ConnectionTransport, slowMo?: number): Promise<WKBrowser>;
    constructor(transport: ConnectionTransport);
    _onDisconnect(): void;
    newContext(options?: BrowserContextOptions): Promise<BrowserContext>;
    contexts(): BrowserContext[];
    newPage(options?: BrowserContextOptions): Promise<Page>;
    _waitForFirstPageTarget(): Promise<void>;
    _onPageProxyCreated(event: Protocol.Browser.pageProxyCreatedPayload): void;
    _onPageProxyDestroyed(event: Protocol.Browser.pageProxyDestroyedPayload): void;
    _onPageProxyMessageReceived(event: PageProxyMessageReceivedPayload): void;
    _onProvisionalLoadFailed(event: Protocol.Browser.provisionalLoadFailedPayload): void;
    isConnected(): boolean;
    close(): Promise<void>;
    _createBrowserContext(browserContextId: string | undefined, options: BrowserContextOptions): BrowserContext;
    _setDebugFunction(debugFunction: (message: string) => void): void;
}
