/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import * as nodeEvents from 'events';
import * as nodeDebug from 'debug';
import * as nodeBuffer from 'buffer';
import * as types from './types';
import { ConnectionTransport } from './transport';
export declare const isNode: boolean;
export declare function promisify(nodeFunction: Function): Function;
export declare type Listener = (...args: any[]) => void;
export declare const EventEmitter: typeof nodeEvents.EventEmitter;
export declare type EventEmitterType = nodeEvents.EventEmitter;
declare type DebugType = typeof nodeDebug;
export declare const debug: DebugType;
export declare const Buffer: typeof nodeBuffer.Buffer;
export declare type BufferType = Buffer;
export declare function readFileAsync(file: string, encoding: string): Promise<string>;
export declare function writeFileAsync(file: string, data: any): Promise<any>;
export declare function basename(file: string): string;
export declare function openFdAsync(file: string, flags: string): Promise<number>;
export declare function writeFdAsync(fd: number, buffer: Buffer): Promise<void>;
export declare function closeFdAsync(fd: number): Promise<void>;
export declare function getMimeType(file: string): string;
export declare function urlMatches(urlString: string, match: types.URLMatch | undefined): boolean;
export declare function pngToJpeg(buffer: Buffer): Buffer;
export declare function fetchUrl(url: string): Promise<string>;
export declare function makeWaitForNextTask(): (callback: () => void) => void;
export declare class WebSocketTransport implements ConnectionTransport {
    private _ws;
    onmessage?: (message: string) => void;
    onclose?: () => void;
    private _connectPromise;
    constructor(url: string);
    send(message: string): Promise<void>;
    close(): void;
}
export {};
