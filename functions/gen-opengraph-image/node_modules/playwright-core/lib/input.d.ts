/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as types from './types';
export declare type Modifier = 'Alt' | 'Control' | 'Meta' | 'Shift';
export declare type Button = 'left' | 'right' | 'middle';
export declare type PointerActionOptions = {
    modifiers?: Modifier[];
    relativePoint?: types.Point;
};
export declare type ClickOptions = PointerActionOptions & {
    delay?: number;
    button?: Button;
    clickCount?: number;
};
export declare type MultiClickOptions = PointerActionOptions & {
    delay?: number;
    button?: Button;
};
export declare const keypadLocation = 3;
export interface RawKeyboard {
    keydown(modifiers: Set<Modifier>, code: string, keyCode: number, keyCodeWithoutLocation: number, key: string, location: number, autoRepeat: boolean, text: string | undefined): Promise<void>;
    keyup(modifiers: Set<Modifier>, code: string, keyCode: number, keyCodeWithoutLocation: number, key: string, location: number): Promise<void>;
    sendText(text: string): Promise<void>;
}
export declare class Keyboard {
    private _raw;
    private _pressedModifiers;
    private _pressedKeys;
    constructor(raw: RawKeyboard);
    down(key: string, options?: {
        text?: string;
    }): Promise<void>;
    private _keyDescriptionForString;
    up(key: string): Promise<void>;
    sendCharacters(text: string): Promise<void>;
    type(text: string, options?: {
        delay?: number;
    }): Promise<void>;
    press(key: string, options?: {
        delay?: number;
        text?: string;
    }): Promise<void>;
    _ensureModifiers(modifiers: Modifier[]): Promise<Modifier[]>;
    _modifiers(): Set<Modifier>;
}
export interface RawMouse {
    move(x: number, y: number, button: Button | 'none', buttons: Set<Button>, modifiers: Set<Modifier>): Promise<void>;
    down(x: number, y: number, button: Button, buttons: Set<Button>, modifiers: Set<Modifier>, clickCount: number): Promise<void>;
    up(x: number, y: number, button: Button, buttons: Set<Button>, modifiers: Set<Modifier>, clickCount: number): Promise<void>;
}
export declare class Mouse {
    private _raw;
    private _keyboard;
    private _x;
    private _y;
    private _lastButton;
    private _buttons;
    constructor(raw: RawMouse, keyboard: Keyboard);
    move(x: number, y: number, options?: {
        steps?: number;
    }): Promise<void>;
    down(options?: {
        button?: Button;
        clickCount?: number;
    }): Promise<void>;
    up(options?: {
        button?: Button;
        clickCount?: number;
    }): Promise<void>;
    click(x: number, y: number, options?: ClickOptions): Promise<void>;
    dblclick(x: number, y: number, options?: MultiClickOptions): Promise<void>;
    tripleclick(x: number, y: number, options?: MultiClickOptions): Promise<void>;
}
