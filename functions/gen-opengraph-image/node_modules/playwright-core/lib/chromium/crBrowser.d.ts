/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { BrowserContext, BrowserContextOptions } from '../browserContext';
import { CRConnection, CRSession } from './crConnection';
import { Page, Worker } from '../page';
import { CRTarget } from './crTarget';
import { Protocol } from './protocol';
import { Browser } from '../browser';
import * as platform from '../platform';
import { ConnectionTransport } from '../transport';
export declare class CRBrowser extends platform.EventEmitter implements Browser {
    _connection: CRConnection;
    _client: CRSession;
    readonly _defaultContext: BrowserContext;
    private _contexts;
    _targets: Map<string, CRTarget>;
    private _tracingRecording;
    private _tracingPath;
    private _tracingClient;
    static connect(transport: ConnectionTransport, slowMo?: number): Promise<CRBrowser>;
    constructor(connection: CRConnection);
    _createBrowserContext(contextId: string | null, options: BrowserContextOptions): BrowserContext;
    newContext(options?: BrowserContextOptions): Promise<BrowserContext>;
    contexts(): BrowserContext[];
    newPage(options?: BrowserContextOptions): Promise<Page>;
    _targetCreated(event: Protocol.Target.targetCreatedPayload): Promise<void>;
    _targetDestroyed(event: {
        targetId: string;
    }): Promise<void>;
    _targetInfoChanged(event: Protocol.Target.targetInfoChangedPayload): void;
    _closePage(page: Page): Promise<void>;
    _allTargets(): CRTarget[];
    waitForTarget(predicate: (arg0: CRTarget) => boolean, options?: {
        timeout?: number;
    } | undefined): Promise<CRTarget>;
    close(): Promise<void>;
    browserTarget(): CRTarget;
    serviceWorker(target: CRTarget): Promise<Worker | null>;
    startTracing(page: Page | undefined, options?: {
        path?: string;
        screenshots?: boolean;
        categories?: string[];
    }): Promise<void>;
    stopTracing(): Promise<platform.BufferType>;
    targets(context?: BrowserContext): CRTarget[];
    pageTarget(page: Page): CRTarget;
    isConnected(): boolean;
    _setDebugFunction(debugFunction: (message: string) => void): void;
}
