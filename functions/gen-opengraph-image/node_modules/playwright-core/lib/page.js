"use strict";
/**
 * Copyright 2017 Google Inc. All rights reserved.
 * Modifications copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const frames = require("./frames");
const helper_1 = require("./helper");
const input = require("./input");
const js = require("./javascript");
const screenshotter_1 = require("./screenshotter");
const timeoutSettings_1 = require("./timeoutSettings");
const types = require("./types");
const events_1 = require("./events");
const console_1 = require("./console");
const accessibility = require("./accessibility");
const platform = require("./platform");
class Page extends platform.EventEmitter {
    constructor(delegate, browserContext) {
        super();
        this._closed = false;
        this._disconnected = false;
        this._pageBindings = new Map();
        this._workers = new Map();
        this._requestHandlers = [];
        this.evaluateHandle = async (pageFunction, ...args) => {
            return this.mainFrame().evaluateHandle(pageFunction, ...args);
        };
        this.$eval = async (selector, pageFunction, ...args) => {
            return this.mainFrame().$eval(selector, pageFunction, ...args);
        };
        this.$$eval = async (selector, pageFunction, ...args) => {
            return this.mainFrame().$$eval(selector, pageFunction, ...args);
        };
        this.evaluate = async (pageFunction, ...args) => {
            return this.mainFrame().evaluate(pageFunction, ...args);
        };
        this._delegate = delegate;
        this._closedCallback = () => { };
        this._closedPromise = new Promise(f => this._closedCallback = f);
        this._disconnectedCallback = () => { };
        this._disconnectedPromise = new Promise(f => this._disconnectedCallback = f);
        this._browserContext = browserContext;
        let viewportSize = null;
        if (browserContext._options.viewport) {
            viewportSize = {
                width: browserContext._options.viewport.width,
                height: browserContext._options.viewport.height,
            };
        }
        this._state = {
            viewportSize,
            mediaType: null,
            colorScheme: null,
            extraHTTPHeaders: null,
            cacheEnabled: null,
            interceptNetwork: null,
            offlineMode: null,
            credentials: null,
            hasTouch: null,
        };
        this.accessibility = new accessibility.Accessibility(delegate.getAccessibilityTree.bind(delegate));
        this.keyboard = new input.Keyboard(delegate.rawKeyboard);
        this.mouse = new input.Mouse(delegate.rawMouse, this.keyboard);
        this._timeoutSettings = new timeoutSettings_1.TimeoutSettings(browserContext._timeoutSettings);
        this._screenshotter = new screenshotter_1.Screenshotter(this);
        this._frameManager = new frames.FrameManager(this);
        if (delegate.pdf)
            this.pdf = delegate.pdf.bind(delegate);
        this.coverage = delegate.coverage ? delegate.coverage() : null;
    }
    _didClose() {
        helper_1.assert(!this._closed, 'Page closed twice');
        this._closed = true;
        this.emit(events_1.Events.Page.Close);
        this._closedCallback();
    }
    _didCrash() {
        const error = new Error('Page crashed!');
        // Do not report node.js stack.
        error.stack = 'Error: ' + error.message; // Stack is supposed to contain error message as the first line.
        this.emit('error', error);
    }
    _didDisconnect() {
        helper_1.assert(!this._disconnected, 'Page disconnected twice');
        this._disconnected = true;
        this._disconnectedCallback(new Error('Target closed'));
    }
    async _onFileChooserOpened(handle) {
        const multiple = await handle.evaluate(element => !!element.multiple);
        if (!this.listenerCount(events_1.Events.Page.FileChooser)) {
            await handle.dispose();
            return;
        }
        const fileChooser = { element: handle, multiple };
        this.emit(events_1.Events.Page.FileChooser, fileChooser);
    }
    context() {
        return this._browserContext;
    }
    async opener() {
        return await this._delegate.opener();
    }
    mainFrame() {
        return this._frameManager.mainFrame();
    }
    frames() {
        return this._frameManager.frames();
    }
    setDefaultNavigationTimeout(timeout) {
        this._timeoutSettings.setDefaultNavigationTimeout(timeout);
    }
    setDefaultTimeout(timeout) {
        this._timeoutSettings.setDefaultTimeout(timeout);
    }
    async $(selector) {
        return this.mainFrame().$(selector);
    }
    async waitForSelector(selector, options) {
        return this.mainFrame().waitForSelector(selector, options);
    }
    async $wait(selector, options) {
        return this.mainFrame().$wait(selector, options);
    }
    async $$(selector) {
        return this.mainFrame().$$(selector);
    }
    async addScriptTag(options) {
        return this.mainFrame().addScriptTag(options);
    }
    async addStyleTag(options) {
        return this.mainFrame().addStyleTag(options);
    }
    async exposeFunction(name, playwrightFunction) {
        if (this._pageBindings.has(name))
            throw new Error(`Failed to add page binding with name ${name}: window['${name}'] already exists!`);
        this._pageBindings.set(name, playwrightFunction);
        await this._delegate.exposeBinding(name, helper_1.helper.evaluationString(addPageBinding, name));
        function addPageBinding(bindingName) {
            const binding = window[bindingName];
            window[bindingName] = (...args) => {
                const me = window[bindingName];
                let callbacks = me['callbacks'];
                if (!callbacks) {
                    callbacks = new Map();
                    me['callbacks'] = callbacks;
                }
                const seq = (me['lastSeq'] || 0) + 1;
                me['lastSeq'] = seq;
                const promise = new Promise((resolve, reject) => callbacks.set(seq, { resolve, reject }));
                binding(JSON.stringify({ name: bindingName, seq, args }));
                return promise;
            };
        }
    }
    setExtraHTTPHeaders(headers) {
        this._state.extraHTTPHeaders = {};
        for (const key of Object.keys(headers)) {
            const value = headers[key];
            helper_1.assert(helper_1.helper.isString(value), `Expected value of header "${key}" to be String, but "${typeof value}" is found.`);
            this._state.extraHTTPHeaders[key] = value;
        }
        return this._delegate.setExtraHTTPHeaders(headers);
    }
    async _onBindingCalled(payload, context) {
        const { name, seq, args } = JSON.parse(payload);
        let expression = null;
        try {
            const result = await this._pageBindings.get(name)(...args);
            expression = helper_1.helper.evaluationString(deliverResult, name, seq, result);
        }
        catch (error) {
            if (error instanceof Error)
                expression = helper_1.helper.evaluationString(deliverError, name, seq, error.message, error.stack);
            else
                expression = helper_1.helper.evaluationString(deliverErrorValue, name, seq, error);
        }
        context.evaluate(expression).catch(helper_1.debugError);
        function deliverResult(name, seq, result) {
            window[name]['callbacks'].get(seq).resolve(result);
            window[name]['callbacks'].delete(seq);
        }
        function deliverError(name, seq, message, stack) {
            const error = new Error(message);
            error.stack = stack;
            window[name]['callbacks'].get(seq).reject(error);
            window[name]['callbacks'].delete(seq);
        }
        function deliverErrorValue(name, seq, value) {
            window[name]['callbacks'].get(seq).reject(value);
            window[name]['callbacks'].delete(seq);
        }
    }
    _addConsoleMessage(type, args, location, text) {
        const message = new console_1.ConsoleMessage(type, text, args, location);
        const intercepted = this._frameManager.interceptConsoleMessage(message);
        if (intercepted || !this.listenerCount(events_1.Events.Page.Console))
            args.forEach(arg => arg.dispose());
        else
            this.emit(events_1.Events.Page.Console, message);
    }
    url() {
        return this.mainFrame().url();
    }
    async content() {
        return this.mainFrame().content();
    }
    async setContent(html, options) {
        return this.mainFrame().setContent(html, options);
    }
    async goto(url, options) {
        return this.mainFrame().goto(url, options);
    }
    async reload(options) {
        const waitPromise = this.waitForNavigation(options);
        await this._delegate.reload();
        return waitPromise;
    }
    async waitForNavigation(options) {
        return this.mainFrame().waitForNavigation(options);
    }
    async waitForLoadState(options) {
        return this.mainFrame().waitForLoadState(options);
    }
    async waitForEvent(event, optionsOrPredicate = {}) {
        if (typeof optionsOrPredicate === 'function')
            optionsOrPredicate = { predicate: optionsOrPredicate };
        const { timeout = this._timeoutSettings.timeout(), predicate = () => true } = optionsOrPredicate;
        return helper_1.helper.waitForEvent(this, event, (...args) => !!predicate(...args), timeout, this._disconnectedPromise);
    }
    async waitForRequest(urlOrPredicate, options = {}) {
        const { timeout = this._timeoutSettings.timeout() } = options;
        return helper_1.helper.waitForEvent(this, events_1.Events.Page.Request, (request) => {
            if (helper_1.helper.isString(urlOrPredicate) || urlOrPredicate instanceof RegExp)
                return platform.urlMatches(request.url(), urlOrPredicate);
            return urlOrPredicate(request);
        }, timeout, this._disconnectedPromise);
    }
    async waitForResponse(urlOrPredicate, options = {}) {
        const { timeout = this._timeoutSettings.timeout() } = options;
        return helper_1.helper.waitForEvent(this, events_1.Events.Page.Response, (response) => {
            if (helper_1.helper.isString(urlOrPredicate) || urlOrPredicate instanceof RegExp)
                return platform.urlMatches(response.url(), urlOrPredicate);
            return urlOrPredicate(response);
        }, timeout, this._disconnectedPromise);
    }
    async goBack(options) {
        const waitPromise = this.waitForNavigation(options);
        const result = await this._delegate.goBack();
        if (!result) {
            waitPromise.catch(() => { });
            return null;
        }
        return waitPromise;
    }
    async goForward(options) {
        const waitPromise = this.waitForNavigation(options);
        const result = await this._delegate.goForward();
        if (!result) {
            waitPromise.catch(() => { });
            return null;
        }
        return waitPromise;
    }
    async emulateMedia(options) {
        helper_1.assert(!options.media || types.mediaTypes.has(options.media), 'Unsupported media: ' + options.media);
        helper_1.assert(!options.colorScheme || types.colorSchemes.has(options.colorScheme), 'Unsupported color scheme: ' + options.colorScheme);
        if (options.media !== undefined)
            this._state.mediaType = options.media;
        if (options.colorScheme !== undefined)
            this._state.colorScheme = options.colorScheme;
        await this._delegate.setEmulateMedia(this._state.mediaType, this._state.colorScheme);
    }
    async setViewportSize(viewportSize) {
        this._state.viewportSize = { ...viewportSize };
        await this._delegate.setViewportSize(this._state.viewportSize);
    }
    viewportSize() {
        return this._state.viewportSize;
    }
    async evaluateOnNewDocument(pageFunction, ...args) {
        const source = helper_1.helper.evaluationString(pageFunction, ...args);
        await this._delegate.evaluateOnNewDocument(source);
    }
    async setCacheEnabled(enabled = true) {
        if (this._state.cacheEnabled === enabled)
            return;
        this._state.cacheEnabled = enabled;
        await this._delegate.setCacheEnabled(enabled);
    }
    async route(url, handler) {
        if (!this._state.interceptNetwork) {
            this._state.interceptNetwork = true;
            await this._delegate.setRequestInterception(true);
        }
        this._requestHandlers.push({ url, handler });
    }
    _requestStarted(request) {
        this.emit(events_1.Events.Page.Request, request);
        if (!request._isIntercepted())
            return;
        for (const { url, handler } of this._requestHandlers) {
            if (platform.urlMatches(request.url(), url)) {
                handler(request);
                return;
            }
        }
        request.continue();
    }
    async setOfflineMode(enabled) {
        if (this._state.offlineMode === enabled)
            return;
        this._state.offlineMode = enabled;
        await this._delegate.setOfflineMode(enabled);
    }
    async authenticate(credentials) {
        this._state.credentials = credentials;
        await this._delegate.authenticate(credentials);
    }
    async screenshot(options) {
        return this._screenshotter.screenshotPage(options);
    }
    async title() {
        return this.mainFrame().title();
    }
    async close(options = { runBeforeUnload: undefined }) {
        if (this._closed)
            return;
        helper_1.assert(!this._disconnected, 'Protocol error: Connection closed. Most likely the page has been closed.');
        const runBeforeUnload = !!options.runBeforeUnload;
        await this._delegate.closePage(runBeforeUnload);
        if (!runBeforeUnload)
            await this._closedPromise;
        if (this._ownedContext)
            await this._ownedContext.close();
    }
    isClosed() {
        return this._closed;
    }
    async click(selector, options) {
        return this.mainFrame().click(selector, options);
    }
    async dblclick(selector, options) {
        return this.mainFrame().dblclick(selector, options);
    }
    async tripleclick(selector, options) {
        return this.mainFrame().tripleclick(selector, options);
    }
    async fill(selector, value, options) {
        return this.mainFrame().fill(selector, value, options);
    }
    async focus(selector, options) {
        return this.mainFrame().focus(selector, options);
    }
    async hover(selector, options) {
        return this.mainFrame().hover(selector, options);
    }
    async select(selector, value, options) {
        return this.mainFrame().select(selector, value, options);
    }
    async type(selector, text, options) {
        return this.mainFrame().type(selector, text, options);
    }
    async check(selector, options) {
        return this.mainFrame().check(selector, options);
    }
    async uncheck(selector, options) {
        return this.mainFrame().uncheck(selector, options);
    }
    async waitFor(selectorOrFunctionOrTimeout, options, ...args) {
        return this.mainFrame().waitFor(selectorOrFunctionOrTimeout, options, ...args);
    }
    async waitForFunction(pageFunction, options, ...args) {
        return this.mainFrame().waitForFunction(pageFunction, options, ...args);
    }
    workers() {
        return [...this._workers.values()];
    }
    _addWorker(workerId, worker) {
        this._workers.set(workerId, worker);
        this.emit(events_1.Events.Page.WorkerCreated, worker);
    }
    _removeWorker(workerId) {
        const worker = this._workers.get(workerId);
        if (!worker)
            return;
        this.emit(events_1.Events.Page.WorkerDestroyed, worker);
        this._workers.delete(workerId);
    }
    _clearWorkers() {
        for (const [workerId, worker] of this._workers) {
            this.emit(events_1.Events.Page.WorkerDestroyed, worker);
            this._workers.delete(workerId);
        }
    }
    on(event, listener) {
        if (event === events_1.Events.Page.FileChooser) {
            if (!this.listenerCount(event))
                this._delegate.setFileChooserIntercepted(true);
        }
        super.on(event, listener);
        return this;
    }
    removeListener(event, listener) {
        super.removeListener(event, listener);
        if (event === events_1.Events.Page.FileChooser && !this.listenerCount(event))
            this._delegate.setFileChooserIntercepted(false);
        return this;
    }
}
exports.Page = Page;
class Worker {
    constructor(url) {
        this._existingExecutionContext = null;
        this.evaluate = async (pageFunction, ...args) => {
            return (await this._executionContextPromise).evaluate(pageFunction, ...args);
        };
        this.evaluateHandle = async (pageFunction, ...args) => {
            return (await this._executionContextPromise).evaluateHandle(pageFunction, ...args);
        };
        this._url = url;
        this._executionContextCallback = () => { };
        this._executionContextPromise = new Promise(x => this._executionContextCallback = x);
    }
    _createExecutionContext(delegate) {
        this._existingExecutionContext = new js.ExecutionContext(delegate);
        this._executionContextCallback(this._existingExecutionContext);
    }
    url() {
        return this._url;
    }
}
exports.Worker = Worker;
//# sourceMappingURL=page.js.map