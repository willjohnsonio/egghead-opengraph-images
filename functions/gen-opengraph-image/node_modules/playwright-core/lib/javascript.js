"use strict";
/**
 * Copyright (c) Microsoft Corporation.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
class ExecutionContext {
    constructor(delegate) {
        this.evaluate = async (pageFunction, ...args) => {
            return this._evaluate(true /* returnByValue */, pageFunction, ...args);
        };
        this.evaluateHandle = async (pageFunction, ...args) => {
            return this._evaluate(false /* returnByValue */, pageFunction, ...args);
        };
        this._delegate = delegate;
    }
    _evaluate(returnByValue, pageFunction, ...args) {
        return this._delegate.evaluate(this, returnByValue, pageFunction, ...args);
    }
    _createHandle(remoteObject) {
        return new JSHandle(this, remoteObject);
    }
}
exports.ExecutionContext = ExecutionContext;
class JSHandle {
    constructor(context, remoteObject) {
        this._disposed = false;
        this.evaluate = (pageFunction, ...args) => {
            return this._context.evaluate(pageFunction, this, ...args);
        };
        this.evaluateHandle = (pageFunction, ...args) => {
            return this._context.evaluateHandle(pageFunction, this, ...args);
        };
        this._context = context;
        this._remoteObject = remoteObject;
    }
    async getProperty(propertyName) {
        const objectHandle = await this.evaluateHandle((object, propertyName) => {
            const result = { __proto__: null };
            result[propertyName] = object[propertyName];
            return result;
        }, propertyName);
        const properties = await objectHandle.getProperties();
        const result = properties.get(propertyName) || null;
        await objectHandle.dispose();
        return result;
    }
    getProperties() {
        return this._context._delegate.getProperties(this);
    }
    jsonValue() {
        return this._context._delegate.handleJSONValue(this);
    }
    asElement() {
        return null;
    }
    async dispose() {
        if (this._disposed)
            return;
        this._disposed = true;
        await this._context._delegate.releaseHandle(this);
    }
    toString() {
        return this._context._delegate.handleToString(this, true /* includeType */);
    }
}
exports.JSHandle = JSHandle;
//# sourceMappingURL=javascript.js.map